// pick conditional
// if (globals._input_owner == COW_INPUT_OWNER_NONE) 

#if 0
{
    fancy_mesh = {};
    fancy_mesh.num_vertices = 4;
    fancy_mesh.num_triangles = 4;
    fancy_mesh.vertex_positions = (real32 *) calloc(3 * fancy_mesh.num_vertices, sizeof(real32));
    fancy_mesh.triangle_indices = (u32 *) calloc(3 * fancy_mesh.num_triangles, sizeof(u32));
    float h = (1.0f + SQRT(3.0f)) / 2;
    {
        u32 k = 0;
        fancy_mesh.vertex_positions[k++] = 100.0f * COS(RAD(0.0));
        fancy_mesh.vertex_positions[k++] = 100.0f * 0.0f;
        fancy_mesh.vertex_positions[k++] = 100.0f * SIN(RAD(0.0));
        fancy_mesh.vertex_positions[k++] = 100.0f * COS(RAD(120.0));
        fancy_mesh.vertex_positions[k++] = 100.0f * 0.0f;
        fancy_mesh.vertex_positions[k++] = 100.0f * SIN(RAD(120.0));
        fancy_mesh.vertex_positions[k++] = 100.0f * COS(RAD(240.0));
        fancy_mesh.vertex_positions[k++] = 100.0f * 0.0f;
        fancy_mesh.vertex_positions[k++] = 100.0f * SIN(RAD(240.0));
        fancy_mesh.vertex_positions[k++] = 100.0f * 0.0f;
        fancy_mesh.vertex_positions[k++] = 100.0f * h;
        fancy_mesh.vertex_positions[k++] = 100.0f * 0.0f;
    }
    {
        u32 k = 0;
        fancy_mesh.triangle_indices[k++] = 0;
        fancy_mesh.triangle_indices[k++] = 1;
        fancy_mesh.triangle_indices[k++] = 2;
        fancy_mesh.triangle_indices[k++] = 1;
        fancy_mesh.triangle_indices[k++] = 0;
        fancy_mesh.triangle_indices[k++] = 3;
        fancy_mesh.triangle_indices[k++] = 2;
        fancy_mesh.triangle_indices[k++] = 1;
        fancy_mesh.triangle_indices[k++] = 3;
        fancy_mesh.triangle_indices[k++] = 0;
        fancy_mesh.triangle_indices[k++] = 2;
        fancy_mesh.triangle_indices[k++] = 3;
    }
}
#endif
